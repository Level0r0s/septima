buildscript {
    repositories {
        jcenter()
    }
}

apply plugin: 'java'
apply plugin: 'war'

repositories {
    jcenter()
    mavenLocal()
}

configurations {
    compile.transitive = false
    testCompile.transitive = false
    wrappers.transitive = false
    tomcat
    containerLibs
}

def tomcatVersion = '8.5.8'
def wrappersProject = project(':septima-js-wrappers')

dependencies {
    runtime project(':septima-js-application'),
    project(':septima-js-sql-driver-h2'),
    project(':septima-js-sql-driver-mysql')
    wrappers wrappersProject
    tomcat "org.apache.tomcat:tomcat-catalina:$tomcatVersion",
           "org.apache.tomcat:tomcat-jasper:$tomcatVersion",
           "org.apache.tomcat:tomcat-dbcp:$tomcatVersion",
           "org.apache.tomcat:tomcat-websocket:$tomcatVersion",
           "org.apache.tomcat:tomcat-jaspic-api:$tomcatVersion"
    containerLibs 'com.h2database:h2:1.4.193'
    containerLibs 'com.vividsolutions:jts:1.13'
    testCompile 'org.seleniumhq.selenium:selenium-java:3.0.1',
                'io.github.bonigarcia:webdrivermanager:1.6.0'
    testRuntime 'com.h2database:h2:1.4.193'
}

def wrappersDirName = "${webAppDirName}/WEB-INF/classes"
def libDirName = "${webAppDirName}/WEB-INF/lib"

task cleanExplodedWrappers(type: Delete) {
    delete wrappersDirName
}

task cleanLib(type: Delete) {
    delete libDirName
}

clean.dependsOn cleanExplodedWrappers,
cleanLib

task explodeWrappers(type: Copy) {
    configurations.wrappers.each {
        from zipTree(file(it.getAbsolutePath().replace('.jar', '.zip')))
    }
    into wrappersDirName
}
explodeWrappers.dependsOn wrappersProject.pack

task distilleLib(type: Copy) {
    configurations.runtime.each {
        from file(it)
    }
    into libDirName
}

war {
    exclude 'platypus.xml'
    exclude 'private.properties'
    exclude 'project.properties'
}
war.dependsOn explodeWrappers
war.dependsOn distilleLib

def tomcatDir = "${buildDir}/tomcat"
def tomcatBinDir = "${tomcatDir}/bin"
def sharedLibDir = "${tomcatDir}/lib"

task buildTomcatBin(type: Copy) {
    configurations.tomcat.each {
        from file(it)
    }
    into tomcatBinDir
}

task buildTomcatLibs(type: Copy) {
    configurations.containerLibs.each {
        from file(it)
    }
    into sharedLibDir
}

task buildTomcat() {
}

buildTomcat.dependsOn buildTomcatBin,
buildTomcatLibs

task cleanTomcat(type: Delete){
    delete tomcatDir
}

def props = { 
    fileName ->
    def loadedProps = new Properties()
    def inputFile = file(fileName)
    if(inputFile.exists()){
        def input = inputFile.newDataInputStream()
        try {
            loadedProps.load(input)
            return loadedProps
        } finally {
            input.close()
        }
    }
    return loadedProps
}

def appProps = props("${webAppDirName}/project.properties")
if(!appProps.context)
appProps.context = 'p-tests'
if(!appProps.sourcePath)
appProps.sourcePath = 'app'
def appPrivateProps = props("${webAppDirName}/private.properties")
if(!appPrivateProps.debugTomcatPort)
appPrivateProps.debugTomcatPort = 8902
if(!appPrivateProps.httpTomcatPort)
appPrivateProps.httpTomcatPort = 8085
def testBasesDirectory = "${buildDir}/test-databases"

def datasource1Name = 'septima'
def datasource1Dburl = "jdbc:h2:tcp://localhost/${testBasesDirectory}/platypus-tests-septima"
def datasource1Dbuser = 'sa'
def datasource1Dbpassword = 'sa'
def datasource1Dbschema = 'PUBLIC'
def datasource2Name = 'easHR'
def datasource2Dburl = "jdbc:h2:tcp://localhost/${testBasesDirectory}/platypus-tests-hr"
def datasource2Dbuser = 'sa'
def datasource2Dbpassword = 'sa'
def datasource2Dbschema = 'PUBLIC'
def servletContainerUrl = "http://localhost:${appPrivateProps.httpTomcatPort}/${appProps.context}"
def servletContainerUser = 'testuser2'
def servletContainerPassword = 'test'

task configureTomcat(type: Copy){
    from 'src/main/tomcat-conf'
    into "${tomcatDir}/conf"
    rename 'default-web.xml', 'web.xml'
}

task tomcatExec(type: JavaExec) {
    workingDir tomcatDir
    classpath fileTree(tomcatBinDir)
    main 'org.apache.catalina.startup.Bootstrap'
    jvmArgs '-Xdebug',
            "-Xrunjdwp:server=y,transport=dt_socket,address=${appPrivateProps.debugTomcatPort},suspend=n",
            "-Djava.util.logging.config.file=${file(tomcatDir)}/conf/logging.properties",
            "-Dtomcat.http.port=${appPrivateProps.httpTomcatPort}",
            "-Dapp.context=/${appProps.context}",
            "-Dapp.base=${file(webAppDirName)}",
            "-Ddatasource.1.name=${datasource1Name}",
            "-Ddatasource.1.dburl=${datasource1Dburl}",
            "-Ddatasource.1.dbuser=${datasource1Dbuser}",
            "-Ddatasource.1.dbpassword=${datasource1Dbpassword}",
            "-Ddatasource.1.dbschema=${datasource1Dbschema}",
            "-Ddatasource.2.name=${datasource2Name}",
            "-Ddatasource.2.dburl=${datasource2Dburl}",
            "-Ddatasource.2.dbuser=${datasource2Dbuser}",
            "-Ddatasource.2.dbpassword=${datasource2Dbpassword}",
            "-Ddatasource.2.dbschema=${datasource2Dbschema}",
            "-Ddatasource.default=${datasource1Name}"
}
tomcatExec.dependsOn buildTomcat,
configureTomcat,
distilleLib,
explodeWrappers

task h2Exec(type: JavaExec) {
    classpath fileTree(sharedLibDir)
    main 'org.h2.tools.Server'
    args '-tcp'
}
task h2FillEasExec(type: JavaExec) {
    classpath fileTree(sharedLibDir)
    main 'org.h2.tools.RunScript'
    args '-url', datasource1Dburl, '-user', datasource1Dbuser, '-password', datasource1Dbpassword, '-script', "${projectDir}/src/test/resources/septima.sql"
}
task h2FillHrExec(type: JavaExec) {
    classpath fileTree(sharedLibDir)
    main 'org.h2.tools.RunScript'
    args '-url', datasource2Dburl, '-user', datasource2Dbuser, '-password', datasource2Dbpassword, '-script', "${projectDir}/src/test/resources/hr.sql"
}

def tomcatServer
def h2Server
task launchServers(){
    doFirst {
        h2Server = new ProcessBuilder(h2Exec.commandLine)
        .redirectErrorStream(true)
        .start()
        def h2StdOut = new InputStreamReader(h2Server.getInputStream())
        try{
            def h2NextLine = h2StdOut.readLine()
            while(!h2NextLine.contains('TCP server running at')){
                println(h2NextLine)
                h2NextLine = h2StdOut.readLine()
            }
            println("H2 server started")
            println()
        }finally{
            h2StdOut.close()
        }
        if(new ProcessBuilder(h2FillEasExec.commandLine)
            .start()
            .waitFor() != 0)
        throw new InvalidUserDataException("Can't fill test database 'septima'")
        println 'Test database "septima" filled.'
        if(new ProcessBuilder(h2FillHrExec.commandLine)
            .start()
            .waitFor() != 0)
        throw new InvalidUserDataException("Can't fill test database 'easHR'")
        println 'Test database "easHR" filled.'
        println()
        tomcatServer = new ProcessBuilder(tomcatExec.commandLine)
        .directory(file(tomcatExec.workingDir))
        .redirectErrorStream(true).start()
        def tomcatStdOut = new InputStreamReader(tomcatServer.getInputStream())
        try{
            def tomcatNextLine = tomcatStdOut.readLine()
            while(!tomcatNextLine.contains('Server startup in')){
                println(tomcatNextLine)
                tomcatNextLine = tomcatStdOut.readLine()
            }
            println("Tomcat started")
            println()
        } finally {
            tomcatStdOut.close()
        }
    }
}

task shutdownServers (){
    doFirst {
        if(tomcatServer != null){
            tomcatServer.destroy()
            tomcatServer.waitFor()
            println "Tomcat shutted down"
        }
        if(h2Server != null){
            h2Server.destroy()
            h2Server.waitFor()
            println "H2 server shutted down"
        }
        
        file(testBasesDirectory).list().each {
            fileName -> delete "${testBasesDirectory}/${fileName}"
        }
        println "Test databases erased"
    }
}

launchServers.dependsOn buildTomcat,
configureTomcat,
distilleLib,
explodeWrappers

test.dependsOn launchServers
launchServers.finalizedBy shutdownServers
shutdownServers.mustRunAfter test

test {
    forkEvery = 1
    sourceSets {
        test {
            resources {
                srcDir wrappersDirName
            }
        }
    }
    systemProperties["datasource.1.name"] = datasource1Name
    systemProperties["datasource.1.dburl"] = datasource1Dburl
    systemProperties["datasource.1.dbuser"] = datasource1Dbuser
    systemProperties["datasource.1.dbpassword"] = datasource1Dbpassword
    systemProperties["datasource.1.dbschema"] = datasource1Dbschema
    systemProperties["datasource.2.name"] = datasource2Name
    systemProperties["datasource.2.dburl"] = datasource2Dburl
    systemProperties["datasource.2.dbuser"] = datasource2Dbuser
    systemProperties["datasource.2.dbpassword"] = datasource2Dbpassword
    systemProperties["datasource.2.dbschema"] = datasource2Dbschema
    systemProperties["datasource.default"] = datasource1Name
    systemProperties["testsource.url"] = file(webAppDirName).toURI().toURL()
    systemProperties["application.source.path"] = appProps.sourcePath
    systemProperties["servlet-container.url"] = servletContainerUrl
    systemProperties["servlet-container.user"] = servletContainerUser
    systemProperties["servlet-container.password"] = servletContainerPassword
}
